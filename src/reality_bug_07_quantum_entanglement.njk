<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Глитчи Юниверси - Квантовая Запутанность</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="styles.css" rel="stylesheet">
    <style>
        .glitch-page {
            background: linear-gradient(135deg, var(--dark-bg) 0%, var(--light-bg) 100%);
            min-height: 100vh;
            padding: 2rem 0;
        }

        .glitch-content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .glitch-title {
            font-size: 3rem;
            margin-bottom: 2rem;
            position: relative;
            display: inline-block;
        }

        .glitch-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 100%;
            height: 3px;
            background: var(--accent-color);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .glitch-title:hover::after {
            transform: scaleX(1);
        }

        .glitch-section {
            margin-bottom: 3rem;
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }

        .glitch-section.animate-fade-in {
            opacity: 1;
            transform: translateY(0);
        }

        .glitch-number {
            font-size: 5rem;
            font-weight: bold;
            color: var(--accent-color);
            opacity: 0.2;
            position: absolute;
            right: 2rem;
            top: 2rem;
            z-index: -1;
        }

        .entanglement-experiment {
            position: relative;
            width: 100%;
            height: 300px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 2rem 0;
        }

        .qubit {
            position: absolute;
            width: 20px;
            height: 20px;
            background: var(--primary-color);
            border-radius: 50%;
            top: 50%;
            transform: translateY(-50%);
            transition: all 1s ease-in-out;
        }

        .qubit.entangled {
            background: var(--accent-color);
            box-shadow: 0 0 20px var(--accent-color);
        }

        .qubit.a {
            left: 20%;
        }

        .qubit.b {
            left: 80%;
        }

        .entanglement-line {
            position: absolute;
            top: 50%;
            left: 20%;
            width: 60%;
            height: 2px;
            background: var(--accent-color);
            transform: translateY(-50%);
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .entanglement-line.visible {
            opacity: 0.5;
        }

        .measurement-result {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .measurement-result.visible {
            opacity: 1;
        }

        .experiment-controls {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
        }

        .experiment-stats {
            display: flex;
            justify-content: space-between;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            margin-top: 1rem;
        }

        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .navigation-buttons a {
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .navigation-buttons a:hover {
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
{% include "partials/nav_bug.njk" %}

    <main class="glitch-page">
        <div class="container">
            <div class="glitch-content">
                <h1 class="glitch-title glitch-text" data-text="Квантовая запутанность">Квантовая запутанность</h1>
                <div class="glitch-number">07</div>

                <div class="glitch-section">
                    <h2>Введение</h2>
                    <p>Квантовая запутанность - это явление, при котором квантовые состояния двух или более частиц оказываются взаимосвязанными, даже если частицы разделены большим расстоянием. Это явление было названо Эйнштейном "жутким действием на расстоянии".</p>
                </div>

                <div class="glitch-section">
                    <h2>Парадокс ЭПР</h2>
                    <p>Парадокс Эйнштейна-Подольского-Розена (ЭПР) был предложен для демонстрации неполноты квантовой механики. Однако последующие эксперименты подтвердили существование квантовой запутанности и нелокальности.</p>
                </div>

                <div class="glitch-section">
                    <h2>Интерактивный эксперимент</h2>
                    <div class="entanglement-experiment" id="entanglement-experiment">
                        <div class="qubit a"></div>
                        <div class="qubit b"></div>
                        <div class="entanglement-line"></div>
                        <div class="measurement-result">Результат измерения: <span id="measurement-value">-</span></div>
                    </div>
                    <div class="experiment-controls">
                        <button class="btn btn-primary" id="create-entangled">Создать запутанные частицы</button>
                        <button class="btn btn-primary" id="measure-state">Измерить состояние</button>
                        <button class="btn btn-secondary" id="reset-entanglement">Сбросить</button>
                    </div>
                    <div class="experiment-stats">
                        <div>Корреляция: <span id="correlation">0%</span></div>
                        <div>Расстояние: <span id="distance">0</span> км</div>
                    </div>
                </div>

                <div class="glitch-section">
                    <h2>Применение в квантовых технологиях</h2>
                    <p>Квантовая запутанность является основой для:</p>
                    <ul>
                        <li>Квантовой телепортации</li>
                        <li>Квантовой криптографии</li>
                        <li>Квантовых вычислений</li>
                        <li>Квантовых сенсоров</li>
                    </ul>
                </div>

                <div class="navigation-buttons">
                    <a href="reality_bug_06_quantum_decoherence.html" class="btn btn-outline-primary">← Квантовая декогеренция</a>
                    <a href="index.html" class="btn btn-outline-secondary">На главную</a>
                    <a href="reality_bug_08_cosmic_loneliness.html" class="btn btn-outline-primary">Космическое одиночество →</a>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer mt-auto py-3">
        <div class="container text-center">
            <span class="text-muted">© 2024 Глитчи Юниверси. Все права защищены.</span>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="scripts.js"></script>
    <script>
        // Специфичный код для эксперимента с квантовой запутанностью
        document.addEventListener('DOMContentLoaded', () => {
            const qubitA = document.querySelector('.qubit.a');
            const qubitB = document.querySelector('.qubit.b');
            const entanglementLine = document.querySelector('.entanglement-line');
            const measurementResult = document.querySelector('.measurement-result');
            const measurementValue = document.getElementById('measurement-value');
            const createEntangledBtn = document.getElementById('create-entangled');
            const measureStateBtn = document.getElementById('measure-state');
            const resetBtn = document.getElementById('reset-entanglement');
            const correlation = document.getElementById('correlation');
            const distance = document.getElementById('distance');
            
            let isEntangled = false;
            let totalMeasurements = 0;
            let correlatedMeasurements = 0;
            let currentDistance = 0;

            createEntangledBtn.addEventListener('click', () => {
                if (!isEntangled) {
                    qubitA.classList.add('entangled');
                    qubitB.classList.add('entangled');
                    entanglementLine.classList.add('visible');
                    isEntangled = true;
                    measurementResult.classList.remove('visible');
                    currentDistance = 0;
                    updateStats();
                }
            });

            measureStateBtn.addEventListener('click', () => {
                if (isEntangled) {
                    totalMeasurements++;
                    const state = Math.random() < 0.5 ? '|0⟩|1⟩' : '|1⟩|0⟩';
                    measurementValue.textContent = state;
                    measurementResult.classList.add('visible');
                    
                    // Имитация корреляции
                    if (Math.random() < 0.95) { // 95% корреляция
                        correlatedMeasurements++;
                    }
                    
                    currentDistance += 100;
                    updateStats();
                }
            });

            function updateStats() {
                correlation.textContent = Math.round((correlatedMeasurements / totalMeasurements) * 100) + '%';
                distance.textContent = currentDistance;
            }

            resetBtn.addEventListener('click', () => {
                qubitA.classList.remove('entangled');
                qubitB.classList.remove('entangled');
                entanglementLine.classList.remove('visible');
                measurementResult.classList.remove('visible');
                isEntangled = false;
                totalMeasurements = 0;
                correlatedMeasurements = 0;
                currentDistance = 0;
                correlation.textContent = '0%';
                distance.textContent = '0';
            });
        });
    </script>
</body>
</html> 
