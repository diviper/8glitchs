window.quest = (function(){
  const ns = 'gr:quest:';
  const get = (k, d=null)=> JSON.parse(localStorage.getItem(ns+k) || 'null') ?? d;
  const set = (k, v)=> localStorage.setItem(ns+k, JSON.stringify(v));

  function introHTML(slug, title, intro){
    return `
    <div class="quest-scene" data-slug="${slug}">
      <div class="scene-bg" aria-hidden="true"></div>
      <div class="scene-layer">
        <h2 class="scene-title">${title}</h2>
        <p class="scene-intro">${intro || '–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç—ë–º–Ω—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é. –ù–µ–æ–Ω –º–µ—Ä—Ü–∞–µ—Ç. –ß—Ç–æ —ç—Ç–æ –∑–∞ ¬´–≥–ª–∏—Ç—á¬ª?'}</p>
        <div class="scene-riddle">
          <label>–ö–ª—é—á (–ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ):</label>
          <input class="riddle-input" placeholder="–≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç">
          <button class="btn" data-enter>–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å</button>
          <button class="btn ghost" data-skip>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
          <div class="riddle-result" aria-live="polite"></div>
        </div>
      </div>
      <div class="scene-content hidden"></div>
    </div>`;
  }

  function mount(container, mdHTML, opts){
    const { slug, title, riddleAnswer } = opts;
    container.innerHTML = introHTML(slug, title, opts.intro);
    const scene = container.querySelector('.quest-scene');
    const content = scene.querySelector('.scene-content');
    content.innerHTML = mdHTML;

    // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    const done = get(slug+':done', false);
    if (done) reveal(scene, slug);

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    scene.querySelector('[data-enter]').onclick = () => {
      const val = scene.querySelector('.riddle-input').value.trim().toLowerCase();
      const ok = !riddleAnswer || normalize(val) === normalize(riddleAnswer);
      if (ok) {
        set(slug+':opened', true);
        reveal(scene, slug);
      } else {
        toast(scene, '–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ üëÄ');
      }
    };
    scene.querySelector('[data-skip]').onclick = () => { reveal(scene, slug); };

    // –æ—Ç–º–µ—Ç–∫–∞ ¬´–∑–∞–≤–µ—Ä—à–µ–Ω–æ¬ª –ø—Ä–∏ –∫–æ–Ω—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const doneBtn = content.querySelector('[data-quest-done]');
    if (doneBtn) doneBtn.onclick = () => { set(slug+':done', true); toast(scene, '‚úî –ó–∞–≤–µ—Ä—à–µ–Ω–æ'); };
  }

  function reveal(scene, slug){
    scene.querySelector('.scene-layer').classList.add('fade-out');
    scene.querySelector('.scene-content').classList.remove('hidden');
    setTimeout(()=> scene.querySelector('.scene-layer').remove(), 300);
    set(slug+':opened', true);
  }

  function normalize(s){ return (s||'').toLowerCase().replace(/\s+/g,' ').trim(); }
  function toast(root, msg){
    let t = document.createElement('div');
    t.className='toast floating'; t.textContent = msg; root.appendChild(t);
    setTimeout(()=> t.classList.add('show'), 10);
    setTimeout(()=> t.remove(), 2000);
  }

  function getStats(manifest){
    const all = manifest.length;
    let opened=0, done=0;
    manifest.forEach(m=>{
      if (get(m.slug+':opened')) opened++;
      if (get(m.slug+':done')) done++;
    });
    return { all, opened, done };
  }

  return { mount, getStats };
})();
